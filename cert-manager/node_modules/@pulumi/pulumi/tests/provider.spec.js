"use strict";
// Copyright 2016-2021, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const util_1 = require("./util");
const pulumi = require("..");
const internals = require("../provider/internals");
const gstruct = require("google-protobuf/google/protobuf/struct_pb.js");
class TestResource extends pulumi.CustomResource {
    constructor(name, opts) {
        super("test:index:TestResource", name, {}, opts);
    }
}
class TestModule {
    construct(name, type, urn) {
        switch (type) {
            case "test:index:TestResource":
                return new TestResource(name, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    }
}
class TestMocks {
    call(args) {
        throw new Error(`unknown function ${args.token}`);
    }
    newResource(args) {
        return {
            id: args.name + "_id",
            state: args.inputs,
        };
    }
}
describe("provider", () => {
    it("parses arguments generated by --logflow", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
        const parsedArgs = internals.parseArgs(["--logtostderr", "-v=9", "--tracing", "127.0.0.1:6007", "127.0.0.1:12345"]);
        if (parsedArgs !== undefined) {
            assert.strictEqual("127.0.0.1:12345", parsedArgs.engineAddress);
        }
        else {
            assert.fail("failed to parse");
        }
    })));
    describe("deserializeInputs", () => {
        beforeEach(() => {
            pulumi.runtime._reset();
            pulumi.runtime._resetResourcePackages();
            pulumi.runtime._resetResourceModules();
        });
        function assertOutputEqual(actual, value, known, secret, deps) {
            return __awaiter(this, void 0, void 0, function* () {
                assert.ok(pulumi.Output.isInstance(actual));
                if (typeof value === "function") {
                    yield value(yield actual.promise());
                }
                else {
                    assert.deepStrictEqual(yield actual.promise(), value);
                }
                assert.deepStrictEqual(yield actual.isKnown, known);
                assert.deepStrictEqual(yield actual.isSecret, secret);
                const actualDeps = new Set();
                const resources = yield actual.allResources();
                for (const r of resources) {
                    const urn = yield r.urn.promise();
                    actualDeps.add(urn);
                }
                assert.deepStrictEqual(actualDeps, new Set((deps !== null && deps !== void 0 ? deps : [])));
            });
        }
        function createSecret(value) {
            return {
                [pulumi.runtime.specialSigKey]: pulumi.runtime.specialSecretSig,
                value,
            };
        }
        function createResourceRef(urn, id) {
            return Object.assign({ [pulumi.runtime.specialSigKey]: pulumi.runtime.specialResourceSig, urn }, (id && { id }));
        }
        function createOutputValue(value, secret, dependencies) {
            return Object.assign(Object.assign(Object.assign({ [pulumi.runtime.specialSigKey]: pulumi.runtime.specialOutputValueSig }, (value !== undefined && { value })), (secret && { secret })), (dependencies && { dependencies }));
        }
        const testURN = "urn:pulumi:stack::project::test:index:TestResource::name";
        const testID = "name_id";
        const tests = [
            {
                name: "unknown",
                input: pulumi.runtime.unknownValue,
                deps: ["fakeURN"],
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    yield assertOutputEqual(actual, undefined, false, false, ["fakeURN"]);
                }),
            },
            {
                name: "array nested unknown",
                input: [pulumi.runtime.unknownValue],
                deps: ["fakeURN"],
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    yield assertOutputEqual(actual, undefined, false, false, ["fakeURN"]);
                }),
            },
            {
                name: "object nested unknown",
                input: { foo: pulumi.runtime.unknownValue },
                deps: ["fakeURN"],
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    yield assertOutputEqual(actual, undefined, false, false, ["fakeURN"]);
                }),
            },
            {
                name: "unknown output value",
                input: createOutputValue(undefined, false, ["fakeURN"]),
                deps: ["fakeURN"],
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    yield assertOutputEqual(actual, undefined, false, false, ["fakeURN"]);
                }),
            },
            {
                name: "unknown output value (no deps)",
                input: createOutputValue(),
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    yield assertOutputEqual(actual, undefined, false, false);
                }),
            },
            {
                name: "array nested unknown output value",
                input: [createOutputValue(undefined, false, ["fakeURN"])],
                deps: ["fakeURN"],
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    assert.ok(Array.isArray(actual));
                    yield assertOutputEqual(actual[0], undefined, false, false, ["fakeURN"]);
                }),
            },
            {
                name: "array nested unknown output value (no deps)",
                input: [createOutputValue(undefined, false, ["fakeURN"])],
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    assert.ok(Array.isArray(actual));
                    yield assertOutputEqual(actual[0], undefined, false, false, ["fakeURN"]);
                }),
            },
            {
                name: "object nested unknown output value",
                input: { foo: createOutputValue(undefined, false, ["fakeURN"]) },
                deps: ["fakeURN"],
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    assert.ok(!pulumi.Output.isInstance(actual));
                    yield assertOutputEqual(actual.foo, undefined, false, false, ["fakeURN"]);
                }),
            },
            {
                name: "object nested unknown output value (no deps)",
                input: { foo: createOutputValue(undefined, false, ["fakeURN"]) },
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    assert.ok(!pulumi.Output.isInstance(actual));
                    yield assertOutputEqual(actual.foo, undefined, false, false, ["fakeURN"]);
                }),
            },
            {
                name: "string value (no deps)",
                input: "hi",
                expected: "hi",
            },
            {
                name: "array nested string value (no deps)",
                input: ["hi"],
                expected: ["hi"],
            },
            {
                name: "object nested string value (no deps)",
                input: { foo: "hi" },
                expected: { foo: "hi" },
            },
            {
                name: "string output value",
                input: createOutputValue("hi", false, ["fakeURN"]),
                deps: ["fakeURN"],
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    yield assertOutputEqual(actual, "hi", true, false, ["fakeURN"]);
                }),
            },
            {
                name: "string output value (no deps)",
                input: createOutputValue("hi"),
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    yield assertOutputEqual(actual, "hi", true, false);
                }),
            },
            {
                name: "array nested string output value",
                input: [createOutputValue("hi", false, ["fakeURN"])],
                deps: ["fakeURN"],
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    assert.ok(Array.isArray(actual));
                    yield assertOutputEqual(actual[0], "hi", true, false, ["fakeURN"]);
                }),
            },
            {
                name: "array nested string output value (no deps)",
                input: [createOutputValue("hi", false, ["fakeURN"])],
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    assert.ok(Array.isArray(actual));
                    yield assertOutputEqual(actual[0], "hi", true, false, ["fakeURN"]);
                }),
            },
            {
                name: "object nested string output value",
                input: { foo: createOutputValue("hi", false, ["fakeURN"]) },
                deps: ["fakeURN"],
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    assert.ok(!pulumi.Output.isInstance(actual));
                    yield assertOutputEqual(actual.foo, "hi", true, false, ["fakeURN"]);
                }),
            },
            {
                name: "object nested string output value (no deps)",
                input: { foo: createOutputValue("hi", false, ["fakeURN"]) },
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    assert.ok(!pulumi.Output.isInstance(actual));
                    yield assertOutputEqual(actual.foo, "hi", true, false, ["fakeURN"]);
                }),
            },
            {
                name: "string secret (no deps)",
                input: createSecret("shh"),
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    yield assertOutputEqual(actual, "shh", true, true);
                }),
            },
            {
                name: "array nested string secret (no deps)",
                input: [createSecret("shh")],
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    yield assertOutputEqual(actual, ["shh"], true, true);
                }),
            },
            {
                name: "object nested string secret (no deps)",
                input: { foo: createSecret("shh") },
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    yield assertOutputEqual(actual, { foo: "shh" }, true, true);
                }),
            },
            {
                name: "string secret output value (no deps)",
                input: createOutputValue("shh", true),
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    yield assertOutputEqual(actual, "shh", true, true);
                }),
            },
            {
                name: "array nested string secret output value (no deps)",
                input: [createOutputValue("shh", true)],
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    assert.ok(Array.isArray(actual));
                    yield assertOutputEqual(actual[0], "shh", true, true);
                }),
            },
            {
                name: "object nested string secret output value (no deps)",
                input: { foo: createOutputValue("shh", true) },
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    assert.ok(!pulumi.Output.isInstance(actual));
                    yield assertOutputEqual(actual.foo, "shh", true, true);
                }),
            },
            {
                name: "string secret output value",
                input: createOutputValue("shh", true, ["fakeURN1", "fakeURN2"]),
                deps: ["fakeURN1", "fakeURN2"],
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    yield assertOutputEqual(actual, "shh", true, true, ["fakeURN1", "fakeURN2"]);
                }),
            },
            {
                name: "string secret output value (no deps)",
                input: createOutputValue("shh", true, ["fakeURN1", "fakeURN2"]),
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    yield assertOutputEqual(actual, "shh", true, true, ["fakeURN1", "fakeURN2"]);
                }),
            },
            {
                name: "array nested string secret output value",
                input: [createOutputValue("shh", true, ["fakeURN1", "fakeURN2"])],
                deps: ["fakeURN1", "fakeURN2"],
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    assert.ok(Array.isArray(actual));
                    yield assertOutputEqual(actual[0], "shh", true, true, ["fakeURN1", "fakeURN2"]);
                }),
            },
            {
                name: "array nested string secret output value (no deps)",
                input: [createOutputValue("shh", true, ["fakeURN1", "fakeURN2"])],
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    assert.ok(Array.isArray(actual));
                    yield assertOutputEqual(actual[0], "shh", true, true, ["fakeURN1", "fakeURN2"]);
                }),
            },
            {
                name: "object nested string secret output value",
                input: { foo: createOutputValue("shh", true, ["fakeURN1", "fakeURN2"]) },
                deps: ["fakeURN1", "fakeURN2"],
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    assert.ok(!pulumi.Output.isInstance(actual));
                    yield assertOutputEqual(actual.foo, "shh", true, true, ["fakeURN1", "fakeURN2"]);
                }),
            },
            {
                name: "object nested string secret output value (no deps)",
                input: { foo: createOutputValue("shh", true, ["fakeURN1", "fakeURN2"]) },
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    assert.ok(!pulumi.Output.isInstance(actual));
                    yield assertOutputEqual(actual.foo, "shh", true, true, ["fakeURN1", "fakeURN2"]);
                }),
            },
            {
                name: "resource ref",
                input: createResourceRef(testURN, testID),
                deps: [testURN],
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    assert.ok(actual instanceof TestResource);
                    assert.deepStrictEqual(yield actual.urn.promise(), testURN);
                    assert.deepStrictEqual(yield actual.id.promise(), testID);
                }),
            },
            {
                name: "resource ref (no deps)",
                input: createResourceRef(testURN, testID),
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    assert.ok(actual instanceof TestResource);
                    assert.deepStrictEqual(yield actual.urn.promise(), testURN);
                    assert.deepStrictEqual(yield actual.id.promise(), testID);
                }),
            },
            {
                name: "array nested resource ref",
                input: [createResourceRef(testURN, testID)],
                deps: [testURN],
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    yield assertOutputEqual(actual, (v) => __awaiter(void 0, void 0, void 0, function* () {
                        assert.ok(Array.isArray(v));
                        assert.ok(v[0] instanceof TestResource);
                        assert.deepStrictEqual(yield v[0].urn.promise(), testURN);
                        assert.deepStrictEqual(yield v[0].id.promise(), testID);
                    }), true, false, [testURN]);
                }),
            },
            {
                name: "array nested resource ref (no deps)",
                input: [createResourceRef(testURN, testID)],
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    assert.ok(Array.isArray(actual));
                    assert.ok(actual[0] instanceof TestResource);
                    assert.deepStrictEqual(yield actual[0].urn.promise(), testURN);
                    assert.deepStrictEqual(yield actual[0].id.promise(), testID);
                }),
            },
            {
                name: "object nested resource ref",
                input: { foo: createResourceRef(testURN, testID) },
                deps: [testURN],
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    yield assertOutputEqual(actual, (v) => __awaiter(void 0, void 0, void 0, function* () {
                        assert.ok(v.foo instanceof TestResource);
                        assert.deepStrictEqual(yield v.foo.urn.promise(), testURN);
                        assert.deepStrictEqual(yield v.foo.id.promise(), testID);
                    }), true, false, [testURN]);
                }),
            },
            {
                name: "object nested resource ref (no deps)",
                input: { foo: createResourceRef(testURN, testID) },
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    assert.ok(actual.foo instanceof TestResource);
                    assert.deepStrictEqual(yield actual.foo.urn.promise(), testURN);
                    assert.deepStrictEqual(yield actual.foo.id.promise(), testID);
                }),
            },
            {
                name: "object nested resource ref and secret",
                input: {
                    foo: createResourceRef(testURN, testID),
                    bar: createSecret("shh"),
                },
                deps: [testURN],
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    // Because there's a nested secret, the top-level property is an output.
                    yield assertOutputEqual(actual, (v) => __awaiter(void 0, void 0, void 0, function* () {
                        assert.ok(v.foo instanceof TestResource);
                        assert.deepStrictEqual(yield v.foo.urn.promise(), testURN);
                        assert.deepStrictEqual(yield v.foo.id.promise(), testID);
                        assert.deepStrictEqual(v.bar, "shh");
                    }), true, true, [testURN]);
                }),
            },
            {
                name: "object nested resource ref and secret output value",
                input: {
                    foo: createResourceRef(testURN, testID),
                    bar: createOutputValue("shh", true),
                },
                deps: [testURN],
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    assert.ok(!pulumi.Output.isInstance(actual));
                    assert.ok(actual.foo instanceof TestResource);
                    assert.deepStrictEqual(yield actual.foo.urn.promise(), testURN);
                    assert.deepStrictEqual(yield actual.foo.id.promise(), testID);
                    yield assertOutputEqual(actual.bar, "shh", true, true);
                }),
            },
            {
                name: "object nested resource ref and secret output value (no deps)",
                input: {
                    foo: createResourceRef(testURN, testID),
                    bar: createOutputValue("shh", true),
                },
                assert: (actual) => __awaiter(void 0, void 0, void 0, function* () {
                    assert.ok(!pulumi.Output.isInstance(actual));
                    assert.ok(actual.foo instanceof TestResource);
                    assert.deepStrictEqual(yield actual.foo.urn.promise(), testURN);
                    assert.deepStrictEqual(yield actual.foo.id.promise(), testID);
                    yield assertOutputEqual(actual.bar, "shh", true, true);
                }),
            },
        ];
        for (const test of tests) {
            it(`deserializes '${test.name}' correctly`, util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
                pulumi.runtime.setMocks(new TestMocks(), "project", "stack", true);
                pulumi.runtime.registerResourceModule("test", "index", new TestModule());
                new TestResource("name"); // Create an instance so it can be deserialized.
                const inputs = { value: test.input };
                const inputsStruct = gstruct.Struct.fromJavaScript(inputs);
                const inputDependencies = {
                    get: () => ({
                        getUrnsList: () => test.deps,
                    }),
                };
                const result = yield pulumi.provider.deserializeInputs(inputsStruct, inputDependencies);
                const actual = result["value"];
                if (test.assert) {
                    yield test.assert(actual);
                }
                else {
                    assert.deepStrictEqual(actual, test.expected);
                }
            })));
        }
    });
    describe("containsOutputs", () => {
        const tests = [
            {
                name: "Output",
                input: pulumi.Output.create("hi"),
                expected: true,
            },
            {
                name: "[Output]",
                input: [pulumi.Output.create("hi")],
                expected: true,
            },
            {
                name: "{ foo: Output }",
                input: { foo: pulumi.Output.create("hi") },
                expected: true,
            },
            {
                name: "Resource",
                input: new pulumi.DependencyResource("fakeURN"),
                expected: false,
            },
            {
                name: "[Resource]",
                input: [new pulumi.DependencyResource("fakeURN")],
                expected: false,
            },
            {
                name: "{ foo: Resource }",
                input: { foo: new pulumi.DependencyResource("fakeURN") },
                expected: false,
            },
        ];
        for (const test of tests) {
            it(`${test.name} should return ${test.expected}`, () => {
                const actual = pulumi.provider.containsOutputs(test.input);
                assert.strictEqual(actual, test.expected);
            });
        }
    });
});
//# sourceMappingURL=provider.spec.js.map