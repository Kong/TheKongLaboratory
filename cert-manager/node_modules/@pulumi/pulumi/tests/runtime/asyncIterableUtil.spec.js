"use strict";
// Copyright 2016-2018, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const asyncIterableUtil_1 = require("../../runtime/asyncIterableUtil");
const util_1 = require("../util");
function enumerate(ts) {
    var ts_1, ts_1_1;
    var e_1, _a;
    return __awaiter(this, void 0, void 0, function* () {
        const tss = [];
        try {
            for (ts_1 = __asyncValues(ts); ts_1_1 = yield ts_1.next(), !ts_1_1.done;) {
                const n = ts_1_1.value;
                tss.push(n);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (ts_1_1 && !ts_1_1.done && (_a = ts_1.return)) yield _a.call(ts_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return tss;
    });
}
describe("PushableAsyncIterable", () => {
    it("correctly produces empty sequence", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
        const queue = new asyncIterableUtil_1.PushableAsyncIterable();
        queue.complete();
        assert.deepStrictEqual(yield enumerate(queue), []);
    })));
    it("correctly produces singleton sequence", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
        const queue = new asyncIterableUtil_1.PushableAsyncIterable();
        queue.push(1);
        queue.complete();
        assert.deepStrictEqual(yield enumerate(queue), [1]);
    })));
    it("correctly produces multiple sequence", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
        const queue = new asyncIterableUtil_1.PushableAsyncIterable();
        queue.push(1);
        queue.push(2);
        queue.push(3);
        queue.complete();
        assert.deepStrictEqual(yield enumerate(queue), [1, 2, 3]);
    })));
    it("correctly terminates outstanding operations afte complete", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
        const queue = new asyncIterableUtil_1.PushableAsyncIterable();
        const queueIter = queue[Symbol.asyncIterator]();
        const terminates = new Promise((resolve) => __awaiter(void 0, void 0, void 0, function* () {
            assert.deepStrictEqual(yield queueIter.next(), { value: undefined, done: true });
            assert.deepStrictEqual(yield queueIter.next(), { value: undefined, done: true });
            assert.deepStrictEqual(yield queueIter.next(), { value: undefined, done: true });
            resolve();
        }));
        queue.complete();
        yield terminates;
        assert.deepStrictEqual(yield queueIter.next(), { value: undefined, done: true });
    })));
    it("correctly interleaves operations", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
        const queue = new asyncIterableUtil_1.PushableAsyncIterable();
        const queueIter = queue[Symbol.asyncIterator]();
        queue.push(1);
        queue.push(2);
        assert.deepStrictEqual(yield queueIter.next(), { value: 1, done: false });
        queue.push(3);
        assert.deepStrictEqual(yield queueIter.next(), { value: 2, done: false });
        assert.deepStrictEqual(yield queueIter.next(), { value: 3, done: false });
        queue.push(4);
        queue.push(5);
        queue.push(6);
        queue.push(7);
        assert.deepStrictEqual(yield queueIter.next(), { value: 4, done: false });
        assert.deepStrictEqual(yield queueIter.next(), { value: 5, done: false });
        assert.deepStrictEqual(yield queueIter.next(), { value: 6, done: false });
        assert.deepStrictEqual(yield queueIter.next(), { value: 7, done: false });
        queue.complete();
        assert.deepStrictEqual(yield queueIter.next(), { value: undefined, done: true });
    })));
});
//# sourceMappingURL=asyncIterableUtil.spec.js.map