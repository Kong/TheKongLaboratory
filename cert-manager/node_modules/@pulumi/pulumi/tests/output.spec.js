"use strict";
// Copyright 2016-2018, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable */
const assert = require("assert");
const output_1 = require("../output");
const runtime = require("../runtime");
const util_1 = require("./util");
// This ensures that the optionality of 'x' and 'y' are preserved when describing an Output<Widget>.
// Subtle changes in the definitions of Lifted<T> can make TS think these are required, which can
// break downstream consumers.
function mustCompile() {
    return output_1.output({
        type: "foo",
        properties: {
            whatever: 1,
        }
    });
}
// mockOutput returns a value that looks like an Output, but allows for greater control over its behavior. This can be
// used to simulate outputs from downlevel SDKs.
function mockOutput(isKnown, value) {
    isKnown = isKnown instanceof Promise ? isKnown : Promise.resolve(isKnown);
    value = value instanceof Promise ? value : Promise.resolve(value);
    return {
        __pulumiOutput: true,
        isKnown: isKnown,
        isSecret: Promise.resolve(false),
        promise: () => value,
        resources: () => new Set(),
        apply(callback) {
            return mockOutput(isKnown, value.then((v) => __awaiter(this, void 0, void 0, function* () {
                if (!isKnown) {
                    return undefined;
                }
                return callback(v);
            })));
        }
    };
}
describe("output", () => {
    it("propagates true isKnown bit from inner Output", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
        runtime._setIsDryRun(true);
        const output1 = new output_1.Output(new Set(), Promise.resolve("outer"), Promise.resolve(true), Promise.resolve(false), Promise.resolve(new Set()));
        const output2 = output1.apply(v => new output_1.Output(new Set(), Promise.resolve("inner"), Promise.resolve(true), Promise.resolve(false), Promise.resolve(new Set())));
        const isKnown = yield output2.isKnown;
        assert.strictEqual(isKnown, true);
        const value = yield output2.promise();
        assert.strictEqual(value, "inner");
    })));
    it("propagates false isKnown bit from inner Output", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
        runtime._setIsDryRun(true);
        const output1 = new output_1.Output(new Set(), Promise.resolve("outer"), Promise.resolve(true), Promise.resolve(false), Promise.resolve(new Set()));
        const output2 = output1.apply(v => new output_1.Output(new Set(), Promise.resolve("inner"), Promise.resolve(false), Promise.resolve(false), Promise.resolve(new Set())));
        const isKnown = yield output2.isKnown;
        assert.strictEqual(isKnown, false);
        const value = yield output2.promise();
        assert.strictEqual(value, "inner");
    })));
    it("can not await if isKnown is a rejected promise.", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
        runtime._setIsDryRun(true);
        const output1 = new output_1.Output(new Set(), Promise.resolve("outer"), Promise.resolve(true), Promise.resolve(false), Promise.resolve(new Set()));
        const output2 = output1.apply(v => new output_1.Output(new Set(), Promise.resolve("inner"), Promise.reject(new Error("foo")), Promise.resolve(false), Promise.resolve(new Set())));
        try {
            const isKnown = yield output2.isKnown;
            assert.fail("Should not reach here");
        }
        catch (err) {
        }
        try {
            const value = yield output2.promise();
            assert.fail("Should not reach here");
        }
        catch (err) {
        }
    })));
    it("propagates true isSecret bit from inner Output", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
        runtime._setIsDryRun(true);
        const output1 = new output_1.Output(new Set(), Promise.resolve("outer"), Promise.resolve(true), Promise.resolve(false), Promise.resolve(new Set()));
        const output2 = output1.apply(v => new output_1.Output(new Set(), Promise.resolve("inner"), Promise.resolve(true), Promise.resolve(true), Promise.resolve(new Set())));
        const isSecret = yield output2.isSecret;
        assert.strictEqual(isSecret, true);
        const value = yield output2.promise();
        assert.strictEqual(value, "inner");
    })));
    it("retains true isSecret bit from outer Output", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
        runtime._setIsDryRun(true);
        const output1 = new output_1.Output(new Set(), Promise.resolve("outer"), Promise.resolve(true), Promise.resolve(true), Promise.resolve(new Set()));
        const output2 = output1.apply(v => new output_1.Output(new Set(), Promise.resolve("inner"), Promise.resolve(true), Promise.resolve(false), Promise.resolve(new Set())));
        const isSecret = yield output2.isSecret;
        assert.strictEqual(isSecret, true);
        const value = yield output2.promise();
        assert.strictEqual(value, "inner");
    })));
    describe("apply", () => {
        function createOutput(val, isKnown, isSecret = false) {
            return new output_1.Output(new Set(), Promise.resolve(val), Promise.resolve(isKnown), Promise.resolve(isSecret), Promise.resolve(new Set()));
        }
        it("can run on known value during preview", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const out = createOutput(0, true);
            const r = out.apply(v => v + 1);
            assert.strictEqual(yield r.isKnown, true);
            assert.strictEqual(yield r.promise(), 1);
        })));
        it("can run on known awaitable value during preview", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const out = createOutput(0, true);
            const r = out.apply(v => Promise.resolve("inner"));
            assert.strictEqual(yield r.isKnown, true);
            assert.strictEqual(yield r.promise(), "inner");
        })));
        it("can run on known known output value during preview", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const out = createOutput(0, true);
            const r = out.apply(v => createOutput("inner", true));
            assert.strictEqual(yield r.isKnown, true);
            assert.strictEqual(yield r.promise(), "inner");
        })));
        it("can run on known unknown output value during preview", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const out = createOutput(0, true);
            const r = out.apply(v => createOutput("inner", false));
            assert.strictEqual(yield r.isKnown, false);
            assert.strictEqual(yield r.promise(), "inner");
        })));
        it("produces unknown default on unknown during preview", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const out = createOutput(0, false);
            const r = out.apply(v => v + 1);
            assert.strictEqual(yield r.isKnown, false);
            assert.strictEqual(yield r.promise(), undefined);
        })));
        it("produces unknown default on unknown awaitable during preview", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const out = createOutput(0, false);
            const r = out.apply(v => Promise.resolve("inner"));
            assert.strictEqual(yield r.isKnown, false);
            assert.strictEqual(yield r.promise(), undefined);
        })));
        it("produces unknown default on unknown known output during preview", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const out = createOutput(0, false);
            const r = out.apply(v => createOutput("inner", true));
            assert.strictEqual(yield r.isKnown, false);
            assert.strictEqual(yield r.promise(), undefined);
        })));
        it("produces unknown default on unknown unknown output during preview", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const out = createOutput(0, false);
            const r = out.apply(v => createOutput("inner", false));
            assert.strictEqual(yield r.isKnown, false);
            assert.strictEqual(yield r.promise(), undefined);
        })));
        it("preserves secret on known during preview", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const out = createOutput(0, true, true);
            const r = out.apply(v => v + 1);
            assert.strictEqual(yield r.isKnown, true);
            assert.strictEqual(yield r.isSecret, true);
            assert.strictEqual(yield r.promise(), 1);
        })));
        it("preserves secret on known awaitable during preview", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const out = createOutput(0, true, true);
            const r = out.apply(v => Promise.resolve("inner"));
            assert.strictEqual(yield r.isKnown, true);
            assert.strictEqual(yield r.isSecret, true);
            assert.strictEqual(yield r.promise(), "inner");
        })));
        it("preserves secret on known known output during preview", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const out = createOutput(0, true, true);
            const r = out.apply(v => createOutput("inner", true));
            assert.strictEqual(yield r.isKnown, true);
            assert.strictEqual(yield r.isSecret, true);
            assert.strictEqual(yield r.promise(), "inner");
        })));
        it("preserves secret on known unknown output during preview", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const out = createOutput(0, true, true);
            const r = out.apply(v => createOutput("inner", false));
            assert.strictEqual(yield r.isKnown, false);
            assert.strictEqual(yield r.isSecret, true);
            assert.strictEqual(yield r.promise(), "inner");
        })));
        it("preserves secret on unknown during preview", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const out = createOutput(0, false, true);
            const r = out.apply(v => v + 1);
            assert.strictEqual(yield r.isKnown, false);
            assert.strictEqual(yield r.isSecret, true);
            assert.strictEqual(yield r.promise(), undefined);
        })));
        it("preserves secret on unknown awaitable during preview", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const out = createOutput(0, false, true);
            const r = out.apply(v => Promise.resolve("inner"));
            assert.strictEqual(yield r.isKnown, false);
            assert.strictEqual(yield r.isSecret, true);
            assert.strictEqual(yield r.promise(), undefined);
        })));
        it("preserves secret on unknown known output during preview", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const out = createOutput(0, false, true);
            const r = out.apply(v => createOutput("inner", true));
            assert.strictEqual(yield r.isKnown, false);
            assert.strictEqual(yield r.isSecret, true);
            assert.strictEqual(yield r.promise(), undefined);
        })));
        it("preserves secret on unknown unknown output during preview", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const out = createOutput(0, false, true);
            const r = out.apply(v => createOutput("inner", false));
            assert.strictEqual(yield r.isKnown, false);
            assert.strictEqual(yield r.isSecret, true);
            assert.strictEqual(yield r.promise(), undefined);
        })));
        it("propagates secret on known known output during preview", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const out = createOutput(0, true);
            const r = out.apply(v => createOutput("inner", true, true));
            assert.strictEqual(yield r.isKnown, true);
            assert.strictEqual(yield r.isSecret, true);
            assert.strictEqual(yield r.promise(), "inner");
        })));
        it("propagates secret on known unknown output during preview", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const out = createOutput(0, true);
            const r = out.apply(v => createOutput("inner", false, true));
            assert.strictEqual(yield r.isKnown, false);
            assert.strictEqual(yield r.isSecret, true);
            assert.strictEqual(yield r.promise(), "inner");
        })));
        it("does not propagate secret on unknown known output during preview", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const out = createOutput(0, false);
            const r = out.apply(v => createOutput("inner", true, true));
            assert.strictEqual(yield r.isKnown, false);
            assert.strictEqual(yield r.isSecret, false);
            assert.strictEqual(yield r.promise(), undefined);
        })));
        it("does not propagate secret on unknown unknown output during preview", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const out = createOutput(0, false);
            const r = out.apply(v => createOutput("inner", false, true));
            assert.strictEqual(yield r.isKnown, false);
            assert.strictEqual(yield r.isSecret, false);
            assert.strictEqual(yield r.promise(), undefined);
        })));
        it("can run on known value", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(false);
            const out = createOutput(0, true);
            const r = out.apply(v => v + 1);
            assert.strictEqual(yield r.isKnown, true);
            assert.strictEqual(yield r.promise(), 1);
        })));
        it("can run on known awaitable value", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(false);
            const out = createOutput(0, true);
            const r = out.apply(v => Promise.resolve("inner"));
            assert.strictEqual(yield r.isKnown, true);
            assert.strictEqual(yield r.promise(), "inner");
        })));
        it("can run on known known output value", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(false);
            const out = createOutput(0, true);
            const r = out.apply(v => createOutput("inner", true));
            assert.strictEqual(yield r.isKnown, true);
            assert.strictEqual(yield r.promise(), "inner");
        })));
        it("can run on unknown known output value", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(false);
            const out = createOutput(0, true);
            const r = out.apply(v => createOutput("inner", false));
            assert.strictEqual(yield r.isKnown, false);
            assert.strictEqual(yield r.promise(), "inner");
        })));
        it("produces known on unknown", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(false);
            const out = createOutput(0, false);
            const r = out.apply(v => v + 1);
            assert.strictEqual(yield r.isKnown, true);
            assert.strictEqual(yield r.promise(), 1);
        })));
        it("produces known on unknown awaitable", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(false);
            const out = createOutput(0, false);
            const r = out.apply(v => Promise.resolve("inner"));
            assert.strictEqual(yield r.isKnown, true);
            assert.strictEqual(yield r.promise(), "inner");
        })));
        it("produces known on unknown known output", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(false);
            const out = createOutput(0, false);
            const r = out.apply(v => createOutput("inner", true));
            assert.strictEqual(yield r.isKnown, true);
            assert.strictEqual(yield r.promise(), "inner");
        })));
        it("produces unknown on unknown unknown output", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(false);
            const out = createOutput(0, false);
            const r = out.apply(v => createOutput("inner", false));
            assert.strictEqual(yield r.isKnown, false);
            assert.strictEqual(yield r.promise(), "inner");
        })));
        it("preserves secret on known", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(false);
            const out = createOutput(0, true, true);
            const r = out.apply(v => v + 1);
            assert.strictEqual(yield r.isKnown, true);
            assert.strictEqual(yield r.isSecret, true);
            assert.strictEqual(yield r.promise(), 1);
        })));
        it("preserves secret on known awaitable", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(false);
            const out = createOutput(0, true, true);
            const r = out.apply(v => Promise.resolve("inner"));
            assert.strictEqual(yield r.isKnown, true);
            assert.strictEqual(yield r.isSecret, true);
            assert.strictEqual(yield r.promise(), "inner");
        })));
        it("preserves secret on known known output", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(false);
            const out = createOutput(0, true, true);
            const r = out.apply(v => createOutput("inner", true));
            assert.strictEqual(yield r.isKnown, true);
            assert.strictEqual(yield r.isSecret, true);
            assert.strictEqual(yield r.promise(), "inner");
        })));
        it("preserves secret on known known output", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(false);
            const out = createOutput(0, true, true);
            const r = out.apply(v => createOutput("inner", false));
            assert.strictEqual(yield r.isKnown, false);
            assert.strictEqual(yield r.isSecret, true);
            assert.strictEqual(yield r.promise(), "inner");
        })));
        it("preserves secret on unknown", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(false);
            const out = createOutput(0, false, true);
            const r = out.apply(v => v + 1);
            assert.strictEqual(yield r.isKnown, true);
            assert.strictEqual(yield r.isSecret, true);
            assert.strictEqual(yield r.promise(), 1);
        })));
        it("preserves secret on unknown awaitable", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(false);
            const out = createOutput(0, false, true);
            const r = out.apply(v => Promise.resolve("inner"));
            assert.strictEqual(yield r.isKnown, true);
            assert.strictEqual(yield r.isSecret, true);
            assert.strictEqual(yield r.promise(), "inner");
        })));
        it("preserves secret on unknown known output", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(false);
            const out = createOutput(0, false, true);
            const r = out.apply(v => createOutput("inner", true));
            assert.strictEqual(yield r.isKnown, true);
            assert.strictEqual(yield r.isSecret, true);
            assert.strictEqual(yield r.promise(), "inner");
        })));
        it("preserves secret on unknown known output", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(false);
            const out = createOutput(0, false, true);
            const r = out.apply(v => createOutput("inner", false));
            assert.strictEqual(yield r.isKnown, false);
            assert.strictEqual(yield r.isSecret, true);
            assert.strictEqual(yield r.promise(), "inner");
        })));
        it("propagates secret on known known output", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(false);
            const out = createOutput(0, true);
            const r = out.apply(v => createOutput("inner", true, true));
            assert.strictEqual(yield r.isKnown, true);
            assert.strictEqual(yield r.isSecret, true);
            assert.strictEqual(yield r.promise(), "inner");
        })));
        it("propagates secret on known unknown output", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(false);
            const out = createOutput(0, true);
            const r = out.apply(v => createOutput("inner", false, true));
            assert.strictEqual(yield r.isKnown, false);
            assert.strictEqual(yield r.isSecret, true);
            assert.strictEqual(yield r.promise(), "inner");
        })));
        it("propagates secret on unknown known output", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(false);
            const out = createOutput(0, false);
            const r = out.apply(v => createOutput("inner", true, true));
            assert.strictEqual(yield r.isKnown, true);
            assert.strictEqual(yield r.isSecret, true);
            assert.strictEqual(yield r.promise(), "inner");
        })));
        it("propagates secret on unknown uknown output", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(false);
            const out = createOutput(0, false);
            const r = out.apply(v => createOutput("inner", false, true));
            assert.strictEqual(yield r.isKnown, false);
            assert.strictEqual(yield r.isSecret, true);
            assert.strictEqual(yield r.promise(), "inner");
        })));
    });
    describe("isKnown", () => {
        function or(output1, output2) {
            const val1 = output1.promise();
            const val2 = output2.promise();
            return new output_1.Output(new Set([...output1.resources(), ...output2.resources()]), Promise.all([val1, val2])
                .then(([val1, val2]) => val1 || val2), Promise.all([val1, output1.isKnown, output2.isKnown])
                .then(([val1, isKnown1, isKnown2]) => val1 ? isKnown1 : isKnown2), Promise.all([val1, output1.isSecret, output2.isSecret])
                .then(([val1, isSecret1, isSecret2]) => val1 ? isSecret1 : isSecret2), Promise.all([output1.allResources(), output2.allResources()])
                .then(([r1, r2]) => new Set([...r1, ...r2])));
        }
        it("choose between known and known output, non-secret", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const o1 = new output_1.Output(new Set(), Promise.resolve("foo"), Promise.resolve(true), Promise.resolve(false), Promise.resolve(new Set()));
            const o2 = new output_1.Output(new Set(), Promise.resolve("bar"), Promise.resolve(true), Promise.resolve(false), Promise.resolve(new Set()));
            const result = or(o1, o2);
            const isKnown = yield result.isKnown;
            assert.strictEqual(isKnown, true);
            const value = yield result.promise();
            assert.strictEqual(value, "foo");
            const secret = yield result.isSecret;
            assert.strictEqual(secret, false);
        })));
        it("choose between known and known output, secret", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const o1 = new output_1.Output(new Set(), Promise.resolve("foo"), Promise.resolve(true), Promise.resolve(true), Promise.resolve(new Set()));
            const o2 = new output_1.Output(new Set(), Promise.resolve("bar"), Promise.resolve(true), Promise.resolve(false), Promise.resolve(new Set()));
            const result = or(o1, o2);
            const isKnown = yield result.isKnown;
            assert.strictEqual(isKnown, true);
            const value = yield result.promise();
            assert.strictEqual(value, "foo");
            const secret = yield result.isSecret;
            assert.strictEqual(secret, true);
        })));
        it("choose between known and unknown output, non-secret", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const o1 = new output_1.Output(new Set(), Promise.resolve("foo"), Promise.resolve(true), Promise.resolve(false), Promise.resolve(new Set()));
            const o2 = new output_1.Output(new Set(), Promise.resolve(undefined), Promise.resolve(false), Promise.resolve(false), Promise.resolve(new Set()));
            const result = or(o1, o2);
            const isKnown = yield result.isKnown;
            assert.strictEqual(isKnown, true);
            const value = yield result.promise();
            assert.strictEqual(value, "foo");
            const secret = yield result.isSecret;
            assert.strictEqual(secret, false);
        })));
        it("choose between known and unknown output, secret", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const o1 = new output_1.Output(new Set(), Promise.resolve("foo"), Promise.resolve(true), Promise.resolve(true), Promise.resolve(new Set()));
            const o2 = new output_1.Output(new Set(), Promise.resolve(undefined), Promise.resolve(false), Promise.resolve(false), Promise.resolve(new Set()));
            const result = or(o1, o2);
            const isKnown = yield result.isKnown;
            assert.strictEqual(isKnown, true);
            const value = yield result.promise();
            assert.strictEqual(value, "foo");
            const secret = yield result.isSecret;
            assert.strictEqual(secret, true);
        })));
        it("choose between unknown and known output, non-secret", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const o1 = new output_1.Output(new Set(), Promise.resolve(undefined), Promise.resolve(false), Promise.resolve(false), Promise.resolve(new Set()));
            const o2 = new output_1.Output(new Set(), Promise.resolve("bar"), Promise.resolve(true), Promise.resolve(false), Promise.resolve(new Set()));
            const result = or(o1, o2);
            const isKnown = yield result.isKnown;
            assert.strictEqual(isKnown, true);
            const value = yield result.promise();
            assert.strictEqual(value, "bar");
            const secret = yield result.isSecret;
            assert.strictEqual(secret, false);
        })));
        it("choose between unknown and known output, secret", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const o1 = new output_1.Output(new Set(), Promise.resolve(undefined), Promise.resolve(false), Promise.resolve(false), Promise.resolve(new Set()));
            const o2 = new output_1.Output(new Set(), Promise.resolve("bar"), Promise.resolve(true), Promise.resolve(true), Promise.resolve(new Set()));
            const result = or(o1, o2);
            const isKnown = yield result.isKnown;
            assert.strictEqual(isKnown, true);
            const value = yield result.promise();
            assert.strictEqual(value, "bar");
            const secret = yield result.isSecret;
            assert.strictEqual(secret, true);
        })));
        it("choose between unknown and unknown output, non-secret", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const o1 = new output_1.Output(new Set(), Promise.resolve(undefined), Promise.resolve(false), Promise.resolve(false), Promise.resolve(new Set()));
            const o2 = new output_1.Output(new Set(), Promise.resolve(undefined), Promise.resolve(false), Promise.resolve(false), Promise.resolve(new Set()));
            const result = or(o1, o2);
            const isKnown = yield result.isKnown;
            assert.strictEqual(isKnown, false);
            const value = yield result.promise();
            assert.strictEqual(value, undefined);
            const secret = yield result.isSecret;
            assert.strictEqual(secret, false);
        })));
        it("choose between unknown and unknown output, secret1", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const o1 = new output_1.Output(new Set(), Promise.resolve(undefined), Promise.resolve(false), Promise.resolve(true), Promise.resolve(new Set()));
            const o2 = new output_1.Output(new Set(), Promise.resolve(undefined), Promise.resolve(false), Promise.resolve(false), Promise.resolve(new Set()));
            const result = or(o1, o2);
            const isKnown = yield result.isKnown;
            assert.strictEqual(isKnown, false);
            const value = yield result.promise();
            assert.strictEqual(value, undefined);
            const secret = yield result.isSecret;
            assert.strictEqual(secret, false);
        })));
        it("choose between unknown and unknown output, secret2", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const o1 = new output_1.Output(new Set(), Promise.resolve(undefined), Promise.resolve(false), Promise.resolve(false), Promise.resolve(new Set()));
            const o2 = new output_1.Output(new Set(), Promise.resolve(undefined), Promise.resolve(false), Promise.resolve(true), Promise.resolve(new Set()));
            const result = or(o1, o2);
            const isKnown = yield result.isKnown;
            assert.strictEqual(isKnown, false);
            const value = yield result.promise();
            assert.strictEqual(value, undefined);
            const secret = yield result.isSecret;
            assert.strictEqual(secret, true);
        })));
        it("choose between unknown and unknown output, secret3", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const o1 = new output_1.Output(new Set(), Promise.resolve(undefined), Promise.resolve(false), Promise.resolve(true), Promise.resolve(new Set()));
            const o2 = new output_1.Output(new Set(), Promise.resolve(undefined), Promise.resolve(false), Promise.resolve(true), Promise.resolve(new Set()));
            const result = or(o1, o2);
            const isKnown = yield result.isKnown;
            assert.strictEqual(isKnown, false);
            const value = yield result.promise();
            assert.strictEqual(value, undefined);
            const secret = yield result.isSecret;
            assert.strictEqual(secret, true);
        })));
        it("is unknown if the value is or contains unknowns", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const o1 = new output_1.Output(new Set(), Promise.resolve(output_1.unknown), Promise.resolve(true), Promise.resolve(false), Promise.resolve(new Set()));
            const o2 = new output_1.Output(new Set(), Promise.resolve(["foo", output_1.unknown]), Promise.resolve(true), Promise.resolve(false), Promise.resolve(new Set()));
            const o3 = new output_1.Output(new Set(), Promise.resolve({ "foo": "foo", unknown: output_1.unknown }), Promise.resolve(true), Promise.resolve(false), Promise.resolve(new Set()));
            assert.strictEqual(yield o1.isKnown, false);
            assert.strictEqual(yield o2.isKnown, false);
            assert.strictEqual(yield o3.isKnown, false);
        })));
        it("is unknown if the result after apply is unknown or contains unknowns", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const o1 = new output_1.Output(new Set(), Promise.resolve("foo"), Promise.resolve(true), Promise.resolve(false), Promise.resolve(new Set()));
            const r1 = o1.apply(v => output_1.unknown);
            const r2 = o1.apply(v => [v, output_1.unknown]);
            const r3 = o1.apply(v => ({ v, unknown: output_1.unknown }));
            const r4 = o1.apply(v => output_1.unknown).apply((v) => v, true);
            const r5 = o1.apply(v => [v, output_1.unknown]).apply((v) => v, true);
            const r6 = o1.apply(v => ({ v, unknown: output_1.unknown })).apply((v) => v, true);
            assert.strictEqual(yield r1.isKnown, false);
            assert.strictEqual(yield r2.isKnown, false);
            assert.strictEqual(yield r3.isKnown, false);
            assert.strictEqual(yield r4.isKnown, false);
            assert.strictEqual(yield r5.isKnown, false);
            assert.strictEqual(yield r6.isKnown, false);
        })));
    });
    describe("concat", () => {
        it("handles no args", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            const result = output_1.concat();
            assert.strictEqual(yield result.promise(), "");
        })));
        it("handles empty string arg", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            const result = output_1.concat("");
            assert.strictEqual(yield result.promise(), "");
        })));
        it("handles non-empty string arg", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            const result = output_1.concat("a");
            assert.strictEqual(yield result.promise(), "a");
        })));
        it("handles promise string arg", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            const result = output_1.concat(Promise.resolve("a"));
            assert.strictEqual(yield result.promise(), "a");
        })));
        it("handles output string arg", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            const result = output_1.concat(output_1.output("a"));
            assert.strictEqual(yield result.promise(), "a");
        })));
        it("handles multiple args", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            const result = output_1.concat("http://", output_1.output("a"), ":", 80);
            assert.strictEqual(yield result.promise(), "http://a:80");
        })));
    });
    describe("interpolate", () => {
        it("handles empty interpolation", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            const result = output_1.interpolate ``;
            assert.strictEqual(yield result.promise(), "");
        })));
        it("handles no placeholders arg", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            const result = output_1.interpolate `a`;
            assert.strictEqual(yield result.promise(), "a");
        })));
        it("handles string placeholders arg", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            const result = output_1.interpolate `${"a"}`;
            assert.strictEqual(yield result.promise(), "a");
        })));
        it("handles promise placeholders arg", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            const result = output_1.interpolate `${Promise.resolve("a")}`;
            assert.strictEqual(yield result.promise(), "a");
        })));
        it("handles output placeholders arg", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            const result = output_1.interpolate `${output_1.output("a")}`;
            assert.strictEqual(yield result.promise(), "a");
        })));
        it("handles multiple args", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            const result = output_1.interpolate `http://${output_1.output("a")}:${80}/`;
            assert.strictEqual(yield result.promise(), "http://a:80/");
        })));
    });
    describe("secret operations", () => {
        it("ensure secret", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            const sec = output_1.secret("foo");
            assert.strictEqual(yield sec.isSecret, true);
        })));
        it("ensure that a secret can be unwrapped", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            const sec = output_1.secret("foo");
            assert.strictEqual(yield output_1.isSecret(sec), true);
            const unsec = output_1.unsecret(sec);
            assert.strictEqual(yield output_1.isSecret(unsec), false);
            assert.strictEqual(yield unsec.promise(), "foo");
        })));
    });
    describe("lifted operations", () => {
        it("lifts properties from inner object", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            const output1 = output_1.output({ a: 1, b: true, c: "str", d: [2], e: { f: 3 }, g: undefined, h: null });
            assert.strictEqual(yield output1.a.promise(), 1);
            assert.strictEqual(yield output1.b.promise(), true);
            assert.strictEqual(yield output1.c.promise(), "str");
            // Can lift both outer arrays as well as array accesses
            assert.deepStrictEqual(yield output1.d.promise(), [2]);
            assert.strictEqual(yield output1.d[0].promise(), 2);
            // Can lift nested objects as well as their properties.
            assert.deepStrictEqual(yield output1.e.promise(), { f: 3 });
            assert.strictEqual(yield output1.e.f.promise(), 3);
            assert.strictEqual(yield output1.g.promise(), undefined);
            assert.strictEqual(yield output1.h.promise(), null);
            // Unspecified things can be lifted, but produce 'undefined'.
            assert.notEqual(output1.z, undefined);
            assert.strictEqual(yield output1.z.promise(), undefined);
        })));
        it("prefers Output members over lifted members", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            const output1 = output_1.output({ apply: 1, promise: 2 });
            assert.ok(output1.apply instanceof Function);
            assert.ok(output1.isKnown instanceof Promise);
        })));
        it("does not lift symbols", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            const output1 = output_1.output({ apply: 1, promise: 2 });
            assert.strictEqual(output1[Symbol.toPrimitive], undefined);
        })));
        it("does not lift __ properties", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            const output1 = output_1.output({ a: 1, b: 2 });
            assert.strictEqual(output1.__pulumiResource, undefined);
        })));
        it("lifts properties from values with nested unknowns", util_1.asyncTest(() => __awaiter(void 0, void 0, void 0, function* () {
            runtime._setIsDryRun(true);
            const output1 = output_1.output({
                foo: "foo",
                bar: output_1.unknown,
                baz: Promise.resolve(output_1.unknown),
                qux: mockOutput(false, undefined),
            });
            assert.strictEqual(yield output1.isKnown, false);
            const result1 = output1.foo;
            assert.strictEqual(yield result1.isKnown, true);
            assert.strictEqual(yield result1.promise(/*withUnknowns*/ true), "foo");
            const result2 = output1.bar;
            assert.strictEqual(yield result2.isKnown, false);
            assert.strictEqual(yield result2.promise(/*withUnknowns*/ true), output_1.unknown);
            const result3 = output1.baz;
            assert.strictEqual(yield result3.isKnown, false);
            assert.strictEqual(yield result3.promise(/*withUnknowns*/ true), output_1.unknown);
            const result4 = output1.qux;
            assert.strictEqual(yield result4.isKnown, false);
            assert.strictEqual(yield result4.promise(/*withUnknowns*/ true), output_1.unknown);
            const result5 = output1.baz.qux;
            assert.strictEqual(yield result5.isKnown, false);
            assert.strictEqual(yield result5.promise(/*withUnknowns*/ true), output_1.unknown);
            const output2 = output_1.output(["foo", output_1.unknown, mockOutput(false, undefined)]);
            assert.strictEqual(yield output2.isKnown, false);
            const result6 = output2[0];
            assert.strictEqual(yield result6.isKnown, true);
            assert.strictEqual(yield result6.promise(/*withUnknowns*/ true), "foo");
            const result7 = output2[1];
            assert.strictEqual(yield result7.isKnown, false);
            assert.strictEqual(yield result7.promise(/*withUnknowns*/ true), output_1.unknown);
            const result8 = output2[2];
            assert.strictEqual(yield result8.isKnown, false);
            assert.strictEqual(yield result8.promise(/*withUnknowns*/ true), output_1.unknown);
            const output3 = output_1.all([output_1.unknown, mockOutput(false, undefined), output_1.output(["foo", output_1.unknown])]);
            assert.strictEqual(yield output3.isKnown, false);
            const result9 = output3[0];
            assert.strictEqual(yield result9.isKnown, false);
            assert.strictEqual(yield result9.promise(/*withUnknowns*/ true), output_1.unknown);
            const result10 = output3[1];
            assert.strictEqual(yield result10.isKnown, false);
            assert.strictEqual(yield result10.promise(/*withUnknowns*/ true), output_1.unknown);
            const result11 = output3[2];
            assert.strictEqual(yield result11.isKnown, false);
            const result12 = result11[0];
            assert.strictEqual(yield result12.isKnown, true);
            assert.strictEqual(yield result12.promise(/*withUnknowns*/ true), "foo");
            const result13 = result11[1];
            assert.strictEqual(yield result13.isKnown, false);
            assert.strictEqual(yield result13.promise(/*withUnknowns*/ true), output_1.unknown);
            const output4 = output_1.all({
                foo: output_1.unknown,
                bar: mockOutput(false, undefined),
                baz: output_1.output({ foo: "foo", qux: output_1.unknown }),
            });
            assert.strictEqual(yield output4.isKnown, false);
            const result14 = output4.foo;
            assert.strictEqual(yield result14.isKnown, false);
            assert.strictEqual(yield result14.promise(/*withUnknowns*/ true), output_1.unknown);
            const result15 = output4.bar;
            assert.strictEqual(yield result15.isKnown, false);
            assert.strictEqual(yield result15.promise(/*withUnknowns*/ true), output_1.unknown);
            const result16 = output4.baz;
            assert.strictEqual(yield result16.isKnown, false);
            const result17 = result16.foo;
            assert.strictEqual(yield result17.isKnown, true);
            assert.strictEqual(yield result17.promise(/*withUnknowns*/ true), "foo");
            const result18 = result16.qux;
            assert.strictEqual(yield result18.isKnown, false);
            assert.strictEqual(yield result18.promise(/*withUnknowns*/ true), output_1.unknown);
        })));
    });
});
//# sourceMappingURL=output.spec.js.map