import * as query from "@pulumi/query";
import { Inputs, Output } from "../output";
import { ResolvedResource } from "../queryable";
import { Resource, ResourceOptions, URN } from "../resource";
/**
 * Get an existing resource's state from the engine.
 */
export declare function getResource(res: Resource, props: Inputs, custom: boolean, urn: string): void;
/**
 * Reads an existing custom resource's state from the resource monitor.  Note that resources read in this way
 * will not be part of the resulting stack's state, as they are presumed to belong to another.
 */
export declare function readResource(res: Resource, t: string, name: string, props: Inputs, opts: ResourceOptions): void;
/**
 * registerResource registers a new resource object with a given type t and name.  It returns the auto-generated
 * URN and the ID that will resolve after the deployment has completed.  All properties will be initialized to property
 * objects that the registration operation will resolve at the right time (or remain unresolved for deployments).
 */
export declare function registerResource(res: Resource, t: string, name: string, custom: boolean, remote: boolean, newDependency: (urn: URN) => Resource, props: Inputs, opts: ResourceOptions): void;
/**
 * registerResourceOutputs completes the resource registration, attaching an optional set of computed outputs.
 */
export declare function registerResourceOutputs(res: Resource, outputs: Inputs | Promise<Inputs> | Output<Inputs>): void;
/**
 * listResourceOutputs returns the resource outputs (if any) for a stack, or an error if the stack
 * cannot be found. Resources are retrieved from the latest stack snapshot, which may include
 * ongoing updates.
 *
 * @param stackName Name of stack to retrieve resource outputs for. Defaults to the current stack.
 * @param typeFilter A [type
 * guard](https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards)
 * that specifies which resource types to list outputs of.
 *
 * @example
 * const buckets = pulumi.runtime.listResourceOutput(aws.s3.Bucket.isInstance);
 */
export declare function listResourceOutputs<U extends Resource>(typeFilter?: (o: any) => o is U, stackName?: string): query.AsyncQueryable<ResolvedResource<U>>;
