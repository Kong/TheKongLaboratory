import { AsyncIterableIterator, GroupedAsyncIterableIterator } from "./interfaces";
export declare abstract class IterableBase<T> implements AsyncIterableIterator<T> {
    private readonly core;
    constructor(core: AsyncIterableIterator<T>);
    [Symbol.asyncIterator](): AsyncIterableIterator<T>;
    next(value?: any): Promise<IteratorResult<T>>;
}
export declare class GroupedAsyncIterableIteratorImpl<TKey, TSource> extends IterableBase<TSource> implements GroupedAsyncIterableIterator<TKey, TSource> {
    readonly key: TKey;
    constructor(key: TKey, core: AsyncIterableIterator<TSource>);
}
