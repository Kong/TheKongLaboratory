"use strict";
// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuntimeClass = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod.  For more details, see https://kubernetes.io/docs/concepts/containers/runtime-class/
 */
class RuntimeClass extends pulumi.CustomResource {
    /**
     * Create a RuntimeClass resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.handler === undefined) && !opts.urn) {
                throw new Error("Missing required property 'handler'");
            }
            resourceInputs["apiVersion"] = "node.k8s.io/v1";
            resourceInputs["handler"] = args ? args.handler : undefined;
            resourceInputs["kind"] = "RuntimeClass";
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["overhead"] = args ? args.overhead : undefined;
            resourceInputs["scheduling"] = args ? args.scheduling : undefined;
        }
        else {
            resourceInputs["apiVersion"] = undefined /*out*/;
            resourceInputs["handler"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["overhead"] = undefined /*out*/;
            resourceInputs["scheduling"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "kubernetes:node.k8s.io/v1alpha1:RuntimeClass" }, { type: "kubernetes:node.k8s.io/v1beta1:RuntimeClass" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(RuntimeClass.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing RuntimeClass resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new RuntimeClass(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RuntimeClass.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RuntimeClass.__pulumiType;
    }
}
exports.RuntimeClass = RuntimeClass;
/** @internal */
RuntimeClass.__pulumiType = 'kubernetes:node.k8s.io/v1:RuntimeClass';
//# sourceMappingURL=runtimeClass.js.map