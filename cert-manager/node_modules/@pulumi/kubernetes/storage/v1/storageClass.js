"use strict";
// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageClass = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
 *
 * StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
 */
class StorageClass extends pulumi.CustomResource {
    /**
     * Create a StorageClass resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.provisioner === undefined) && !opts.urn) {
                throw new Error("Missing required property 'provisioner'");
            }
            resourceInputs["allowVolumeExpansion"] = args ? args.allowVolumeExpansion : undefined;
            resourceInputs["allowedTopologies"] = args ? args.allowedTopologies : undefined;
            resourceInputs["apiVersion"] = "storage.k8s.io/v1";
            resourceInputs["kind"] = "StorageClass";
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["mountOptions"] = args ? args.mountOptions : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["provisioner"] = args ? args.provisioner : undefined;
            resourceInputs["reclaimPolicy"] = args ? args.reclaimPolicy : undefined;
            resourceInputs["volumeBindingMode"] = args ? args.volumeBindingMode : undefined;
        }
        else {
            resourceInputs["allowVolumeExpansion"] = undefined /*out*/;
            resourceInputs["allowedTopologies"] = undefined /*out*/;
            resourceInputs["apiVersion"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["mountOptions"] = undefined /*out*/;
            resourceInputs["parameters"] = undefined /*out*/;
            resourceInputs["provisioner"] = undefined /*out*/;
            resourceInputs["reclaimPolicy"] = undefined /*out*/;
            resourceInputs["volumeBindingMode"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "kubernetes:storage.k8s.io/v1beta1:StorageClass" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(StorageClass.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing StorageClass resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new StorageClass(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of StorageClass.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageClass.__pulumiType;
    }
}
exports.StorageClass = StorageClass;
/** @internal */
StorageClass.__pulumiType = 'kubernetes:storage.k8s.io/v1:StorageClass';
//# sourceMappingURL=storageClass.js.map