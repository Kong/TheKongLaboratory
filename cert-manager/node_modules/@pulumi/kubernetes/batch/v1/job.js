"use strict";
// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Job = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * Job represents the configuration of a single job.
 *
 * This resource waits until its status is ready before registering success
 * for create/update, and populating output properties from the current state of the resource.
 * The following conditions are used to determine whether the resource creation has
 * succeeded or failed:
 *
 * 1. The Job's '.status.startTime' is set, which indicates that the Job has started running.
 * 2. The Job's '.status.conditions' has a status of type 'Complete', and a 'status' set
 *    to 'True'.
 * 3. The Job's '.status.conditions' do not have a status of type 'Failed', with a
 *     'status' set to 'True'. If this condition is set, we should fail the Job immediately.
 *
 * If the Job has not reached a Ready state after 10 minutes, it will
 * time out and mark the resource update as Failed. You can override the default timeout value
 * by setting the 'customTimeouts' option on the resource.
 *
 * By default, if a resource failed to become ready in a previous update,
 * Pulumi will continue to wait for readiness on the next update. If you would prefer
 * to schedule a replacement for an unready resource on the next update, you can add the
 * "pulumi.com/replaceUnready": "true" annotation to the resource definition.
 *
 * ## Example Usage
 * ### Create a Job with auto-naming
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as kubernetes from "@pulumi/kubernetes";
 *
 * const job = new kubernetes.batch.v1.Job("pi", {
 *     spec: {
 *         template: {
 *             spec: {
 *                 containers: [{
 *                     name: "pi",
 *                     image: "perl",
 *                     command: [
 *                         "perl",
 *                         "-Mbignum=bpi",
 *                         "-wle",
 *                         "print bpi(2000)",
 *                     ],
 *                 }],
 *                 restartPolicy: "Never",
 *             },
 *         },
 *         backoffLimit: 4,
 *     },
 * });
 * ```
 * ### Create a Job with a user-specified name
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as kubernetes from "@pulumi/kubernetes";
 *
 * const job = new kubernetes.batch.v1.Job("pi", {
 *     metadata: {
 *         name: "pi",
 *     },
 *     spec: {
 *         template: {
 *             spec: {
 *                 containers: [{
 *                     name: "pi",
 *                     image: "perl",
 *                     command: [
 *                         "perl",
 *                         "-Mbignum=bpi",
 *                         "-wle",
 *                         "print bpi(2000)",
 *                     ],
 *                 }],
 *                 restartPolicy: "Never",
 *             },
 *         },
 *         backoffLimit: 4,
 *     },
 * });
 * ```
 * {% /examples %}}
 */
class Job extends pulumi.CustomResource {
    /**
     * Create a Job resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["apiVersion"] = "batch/v1";
            resourceInputs["kind"] = "Job";
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        else {
            resourceInputs["apiVersion"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["spec"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Job.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Job resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Job(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Job.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Job.__pulumiType;
    }
}
exports.Job = Job;
/** @internal */
Job.__pulumiType = 'kubernetes:batch/v1:Job';
//# sourceMappingURL=job.js.map