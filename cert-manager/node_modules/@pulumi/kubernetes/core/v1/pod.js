"use strict";
// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pod = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
 *
 * This resource waits until its status is ready before registering success
 * for create/update, and populating output properties from the current state of the resource.
 * The following conditions are used to determine whether the resource creation has
 * succeeded or failed:
 *
 * 1. The Pod is scheduled ("PodScheduled"" '.status.condition' is true).
 * 2. The Pod is initialized ("Initialized" '.status.condition' is true).
 * 3. The Pod is ready ("Ready" '.status.condition' is true) and the '.status.phase' is
 *    set to "Running".
 *    Or (for Jobs): The Pod succeeded ('.status.phase' set to "Succeeded").
 *
 * If the Pod has not reached a Ready state after 10 minutes, it will
 * time out and mark the resource update as Failed. You can override the default timeout value
 * by setting the 'customTimeouts' option on the resource.
 *
 * ## Example Usage
 * ### Create a Pod with auto-naming
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as kubernetes from "@pulumi/kubernetes";
 *
 * const nginxPod = new kubernetes.core.v1.Pod("nginxPod", {
 *     spec: {
 *         containers: [{
 *             name: "nginx",
 *             image: "nginx:1.14.2",
 *             ports: [{
 *                 containerPort: 80,
 *             }],
 *         }],
 *     },
 * });
 * ```
 * ### Create a Pod with a user-specified name
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as kubernetes from "@pulumi/kubernetes";
 *
 * const nginxPod = new kubernetes.core.v1.Pod("nginxPod", {
 *     metadata: {
 *         name: "nginx",
 *     },
 *     spec: {
 *         containers: [{
 *             name: "nginx",
 *             image: "nginx:1.14.2",
 *             ports: [{
 *                 containerPort: 80,
 *             }],
 *         }],
 *     },
 * });
 * ```
 * {% /examples %}}
 */
class Pod extends pulumi.CustomResource {
    /**
     * Create a Pod resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["apiVersion"] = "v1";
            resourceInputs["kind"] = "Pod";
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        else {
            resourceInputs["apiVersion"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["spec"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Pod.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Pod resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Pod(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Pod.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pod.__pulumiType;
    }
}
exports.Pod = Pod;
/** @internal */
Pod.__pulumiType = 'kubernetes:core/v1:Pod';
//# sourceMappingURL=pod.js.map