"use strict";
// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
// Export members:
__exportStar(require("./binding"), exports);
__exportStar(require("./configMap"), exports);
__exportStar(require("./configMapList"), exports);
__exportStar(require("./endpoints"), exports);
__exportStar(require("./endpointsList"), exports);
__exportStar(require("./event"), exports);
__exportStar(require("./eventList"), exports);
__exportStar(require("./limitRange"), exports);
__exportStar(require("./limitRangeList"), exports);
__exportStar(require("./namespace"), exports);
__exportStar(require("./namespaceList"), exports);
__exportStar(require("./node"), exports);
__exportStar(require("./nodeList"), exports);
__exportStar(require("./persistentVolume"), exports);
__exportStar(require("./persistentVolumeClaim"), exports);
__exportStar(require("./persistentVolumeClaimList"), exports);
__exportStar(require("./persistentVolumeList"), exports);
__exportStar(require("./pod"), exports);
__exportStar(require("./podList"), exports);
__exportStar(require("./podTemplate"), exports);
__exportStar(require("./podTemplateList"), exports);
__exportStar(require("./replicationController"), exports);
__exportStar(require("./replicationControllerList"), exports);
__exportStar(require("./resourceQuota"), exports);
__exportStar(require("./resourceQuotaList"), exports);
__exportStar(require("./secret"), exports);
__exportStar(require("./secretList"), exports);
__exportStar(require("./service"), exports);
__exportStar(require("./serviceAccount"), exports);
__exportStar(require("./serviceAccountList"), exports);
__exportStar(require("./serviceList"), exports);
// Export enums:
__exportStar(require("../../types/enums/core/v1"), exports);
// Import resources to register:
const binding_1 = require("./binding");
const configMap_1 = require("./configMap");
const configMapList_1 = require("./configMapList");
const endpoints_1 = require("./endpoints");
const endpointsList_1 = require("./endpointsList");
const event_1 = require("./event");
const eventList_1 = require("./eventList");
const limitRange_1 = require("./limitRange");
const limitRangeList_1 = require("./limitRangeList");
const namespace_1 = require("./namespace");
const namespaceList_1 = require("./namespaceList");
const node_1 = require("./node");
const nodeList_1 = require("./nodeList");
const persistentVolume_1 = require("./persistentVolume");
const persistentVolumeClaim_1 = require("./persistentVolumeClaim");
const persistentVolumeClaimList_1 = require("./persistentVolumeClaimList");
const persistentVolumeList_1 = require("./persistentVolumeList");
const pod_1 = require("./pod");
const podList_1 = require("./podList");
const podTemplate_1 = require("./podTemplate");
const podTemplateList_1 = require("./podTemplateList");
const replicationController_1 = require("./replicationController");
const replicationControllerList_1 = require("./replicationControllerList");
const resourceQuota_1 = require("./resourceQuota");
const resourceQuotaList_1 = require("./resourceQuotaList");
const secret_1 = require("./secret");
const secretList_1 = require("./secretList");
const service_1 = require("./service");
const serviceAccount_1 = require("./serviceAccount");
const serviceAccountList_1 = require("./serviceAccountList");
const serviceList_1 = require("./serviceList");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "kubernetes:core/v1:Binding":
                return new binding_1.Binding(name, undefined, { urn });
            case "kubernetes:core/v1:ConfigMap":
                return new configMap_1.ConfigMap(name, undefined, { urn });
            case "kubernetes:core/v1:ConfigMapList":
                return new configMapList_1.ConfigMapList(name, undefined, { urn });
            case "kubernetes:core/v1:Endpoints":
                return new endpoints_1.Endpoints(name, undefined, { urn });
            case "kubernetes:core/v1:EndpointsList":
                return new endpointsList_1.EndpointsList(name, undefined, { urn });
            case "kubernetes:core/v1:Event":
                return new event_1.Event(name, undefined, { urn });
            case "kubernetes:core/v1:EventList":
                return new eventList_1.EventList(name, undefined, { urn });
            case "kubernetes:core/v1:LimitRange":
                return new limitRange_1.LimitRange(name, undefined, { urn });
            case "kubernetes:core/v1:LimitRangeList":
                return new limitRangeList_1.LimitRangeList(name, undefined, { urn });
            case "kubernetes:core/v1:Namespace":
                return new namespace_1.Namespace(name, undefined, { urn });
            case "kubernetes:core/v1:NamespaceList":
                return new namespaceList_1.NamespaceList(name, undefined, { urn });
            case "kubernetes:core/v1:Node":
                return new node_1.Node(name, undefined, { urn });
            case "kubernetes:core/v1:NodeList":
                return new nodeList_1.NodeList(name, undefined, { urn });
            case "kubernetes:core/v1:PersistentVolume":
                return new persistentVolume_1.PersistentVolume(name, undefined, { urn });
            case "kubernetes:core/v1:PersistentVolumeClaim":
                return new persistentVolumeClaim_1.PersistentVolumeClaim(name, undefined, { urn });
            case "kubernetes:core/v1:PersistentVolumeClaimList":
                return new persistentVolumeClaimList_1.PersistentVolumeClaimList(name, undefined, { urn });
            case "kubernetes:core/v1:PersistentVolumeList":
                return new persistentVolumeList_1.PersistentVolumeList(name, undefined, { urn });
            case "kubernetes:core/v1:Pod":
                return new pod_1.Pod(name, undefined, { urn });
            case "kubernetes:core/v1:PodList":
                return new podList_1.PodList(name, undefined, { urn });
            case "kubernetes:core/v1:PodTemplate":
                return new podTemplate_1.PodTemplate(name, undefined, { urn });
            case "kubernetes:core/v1:PodTemplateList":
                return new podTemplateList_1.PodTemplateList(name, undefined, { urn });
            case "kubernetes:core/v1:ReplicationController":
                return new replicationController_1.ReplicationController(name, undefined, { urn });
            case "kubernetes:core/v1:ReplicationControllerList":
                return new replicationControllerList_1.ReplicationControllerList(name, undefined, { urn });
            case "kubernetes:core/v1:ResourceQuota":
                return new resourceQuota_1.ResourceQuota(name, undefined, { urn });
            case "kubernetes:core/v1:ResourceQuotaList":
                return new resourceQuotaList_1.ResourceQuotaList(name, undefined, { urn });
            case "kubernetes:core/v1:Secret":
                return new secret_1.Secret(name, undefined, { urn });
            case "kubernetes:core/v1:SecretList":
                return new secretList_1.SecretList(name, undefined, { urn });
            case "kubernetes:core/v1:Service":
                return new service_1.Service(name, undefined, { urn });
            case "kubernetes:core/v1:ServiceAccount":
                return new serviceAccount_1.ServiceAccount(name, undefined, { urn });
            case "kubernetes:core/v1:ServiceAccountList":
                return new serviceAccountList_1.ServiceAccountList(name, undefined, { urn });
            case "kubernetes:core/v1:ServiceList":
                return new serviceList_1.ServiceList(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("kubernetes", "core/v1", _module);
//# sourceMappingURL=index.js.map