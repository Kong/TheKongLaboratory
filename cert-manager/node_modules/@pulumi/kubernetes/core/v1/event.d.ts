import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../../types";
/**
 * Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
 */
export declare class Event extends pulumi.CustomResource {
    /**
     * Get an existing Event resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Event;
    /**
     * Returns true if the given object is an instance of Event.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Event;
    /**
     * What action was taken/failed regarding to the Regarding object.
     */
    readonly action: pulumi.Output<string>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    readonly apiVersion: pulumi.Output<"v1">;
    /**
     * The number of times this event has occurred.
     */
    readonly count: pulumi.Output<number>;
    /**
     * Time when this Event was first observed.
     */
    readonly eventTime: pulumi.Output<string>;
    /**
     * The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
     */
    readonly firstTimestamp: pulumi.Output<string>;
    /**
     * The object that this event is about.
     */
    readonly involvedObject: pulumi.Output<outputs.core.v1.ObjectReference>;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    readonly kind: pulumi.Output<"Event">;
    /**
     * The time at which the most recent occurrence of this event was recorded.
     */
    readonly lastTimestamp: pulumi.Output<string>;
    /**
     * A human-readable description of the status of this operation.
     */
    readonly message: pulumi.Output<string>;
    /**
     * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    readonly metadata: pulumi.Output<outputs.meta.v1.ObjectMeta>;
    /**
     * This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
     */
    readonly reason: pulumi.Output<string>;
    /**
     * Optional secondary object for more complex actions.
     */
    readonly related: pulumi.Output<outputs.core.v1.ObjectReference>;
    /**
     * Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
     */
    readonly reportingComponent: pulumi.Output<string>;
    /**
     * ID of the controller instance, e.g. `kubelet-xyzf`.
     */
    readonly reportingInstance: pulumi.Output<string>;
    /**
     * Data about the Event series this event represents or nil if it's a singleton Event.
     */
    readonly series: pulumi.Output<outputs.core.v1.EventSeries>;
    /**
     * The component reporting this event. Should be a short machine understandable string.
     */
    readonly source: pulumi.Output<outputs.core.v1.EventSource>;
    /**
     * Type of this event (Normal, Warning), new types could be added in the future
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a Event resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EventArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Event resource.
 */
export interface EventArgs {
    /**
     * What action was taken/failed regarding to the Regarding object.
     */
    action?: pulumi.Input<string>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: pulumi.Input<"v1">;
    /**
     * The number of times this event has occurred.
     */
    count?: pulumi.Input<number>;
    /**
     * Time when this Event was first observed.
     */
    eventTime?: pulumi.Input<string>;
    /**
     * The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
     */
    firstTimestamp?: pulumi.Input<string>;
    /**
     * The object that this event is about.
     */
    involvedObject: pulumi.Input<inputs.core.v1.ObjectReference>;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: pulumi.Input<"Event">;
    /**
     * The time at which the most recent occurrence of this event was recorded.
     */
    lastTimestamp?: pulumi.Input<string>;
    /**
     * A human-readable description of the status of this operation.
     */
    message?: pulumi.Input<string>;
    /**
     * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata: pulumi.Input<inputs.meta.v1.ObjectMeta>;
    /**
     * This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
     */
    reason?: pulumi.Input<string>;
    /**
     * Optional secondary object for more complex actions.
     */
    related?: pulumi.Input<inputs.core.v1.ObjectReference>;
    /**
     * Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
     */
    reportingComponent?: pulumi.Input<string>;
    /**
     * ID of the controller instance, e.g. `kubelet-xyzf`.
     */
    reportingInstance?: pulumi.Input<string>;
    /**
     * Data about the Event series this event represents or nil if it's a singleton Event.
     */
    series?: pulumi.Input<inputs.core.v1.EventSeries>;
    /**
     * The component reporting this event. Should be a short machine understandable string.
     */
    source?: pulumi.Input<inputs.core.v1.EventSource>;
    /**
     * Type of this event (Normal, Warning), new types could be added in the future
     */
    type?: pulumi.Input<string>;
}
