"use strict";
// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatefulSet = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * StatefulSet represents a set of pods with consistent identities. Identities are defined as:
 *  - Network: A single stable DNS and hostname.
 *  - Storage: As many VolumeClaims as requested.
 *    The StatefulSet guarantees that a given network identity will always map to the same storage identity.
 *
 * This resource waits until its status is ready before registering success
 * for create/update, and populating output properties from the current state of the resource.
 * The following conditions are used to determine whether the resource creation has
 * succeeded or failed:
 *
 * 1. The value of 'spec.replicas' matches '.status.replicas', '.status.currentReplicas',
 *    and '.status.readyReplicas'.
 * 2. The value of '.status.updateRevision' matches '.status.currentRevision'.
 *
 * If the StatefulSet has not reached a Ready state after 10 minutes, it will
 * time out and mark the resource update as Failed. You can override the default timeout value
 * by setting the 'customTimeouts' option on the resource.
 *
 * ## Example Usage
 * ### Create a StatefulSet with auto-naming
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as kubernetes from "@pulumi/kubernetes";
 *
 * const nginxService = new kubernetes.core.v1.Service("nginxService", {
 *     metadata: {
 *         labels: {
 *             app: "nginx",
 *         },
 *     },
 *     spec: {
 *         ports: [{
 *             port: 80,
 *             name: "web",
 *         }],
 *         clusterIP: "None",
 *         selector: {
 *             app: "nginx",
 *         },
 *     },
 * });
 * const wwwStatefulSet = new kubernetes.apps.v1.StatefulSet("wwwStatefulSet", {
 *     spec: {
 *         selector: {
 *             matchLabels: {
 *                 app: "nginx",
 *             },
 *         },
 *         serviceName: nginxService.metadata.name,
 *         replicas: 3,
 *         template: {
 *             metadata: {
 *                 labels: {
 *                     app: "nginx",
 *                 },
 *             },
 *             spec: {
 *                 terminationGracePeriodSeconds: 10,
 *                 containers: [{
 *                     name: "nginx",
 *                     image: "k8s.gcr.io/nginx-slim:0.8",
 *                     ports: [{
 *                         containerPort: 80,
 *                         name: "web",
 *                     }],
 *                     volumeMounts: [{
 *                         name: "www",
 *                         mountPath: "/usr/share/nginx/html",
 *                     }],
 *                 }],
 *             },
 *         },
 *         volumeClaimTemplates: [{
 *             metadata: {
 *                 name: "www",
 *             },
 *             spec: {
 *                 accessModes: ["ReadWriteOnce"],
 *                 storageClassName: "my-storage-class",
 *                 resources: {
 *                     requests: {
 *                         storage: "1Gi",
 *                     },
 *                 },
 *             },
 *         }],
 *     },
 * });
 * ```
 * ### Create a StatefulSet with a user-specified name
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as kubernetes from "@pulumi/kubernetes";
 *
 * const nginxService = new kubernetes.core.v1.Service("nginxService", {
 *     metadata: {
 *         name: "nginx",
 *         labels: {
 *             app: "nginx",
 *         },
 *     },
 *     spec: {
 *         ports: [{
 *             port: 80,
 *             name: "web",
 *         }],
 *         clusterIP: "None",
 *         selector: {
 *             app: "nginx",
 *         },
 *     },
 * });
 * const wwwStatefulSet = new kubernetes.apps.v1.StatefulSet("wwwStatefulSet", {
 *     metadata: {
 *         name: "web",
 *     },
 *     spec: {
 *         selector: {
 *             matchLabels: {
 *                 app: "nginx",
 *             },
 *         },
 *         serviceName: nginxService.metadata.name,
 *         replicas: 3,
 *         template: {
 *             metadata: {
 *                 labels: {
 *                     app: "nginx",
 *                 },
 *             },
 *             spec: {
 *                 terminationGracePeriodSeconds: 10,
 *                 containers: [{
 *                     name: "nginx",
 *                     image: "k8s.gcr.io/nginx-slim:0.8",
 *                     ports: [{
 *                         containerPort: 80,
 *                         name: "web",
 *                     }],
 *                     volumeMounts: [{
 *                         name: "www",
 *                         mountPath: "/usr/share/nginx/html",
 *                     }],
 *                 }],
 *             },
 *         },
 *         volumeClaimTemplates: [{
 *             metadata: {
 *                 name: "www",
 *             },
 *             spec: {
 *                 accessModes: ["ReadWriteOnce"],
 *                 storageClassName: "my-storage-class",
 *                 resources: {
 *                     requests: {
 *                         storage: "1Gi",
 *                     },
 *                 },
 *             },
 *         }],
 *     },
 * });
 * ```
 * {% /examples %}}
 */
class StatefulSet extends pulumi.CustomResource {
    /**
     * Create a StatefulSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["apiVersion"] = "apps/v1";
            resourceInputs["kind"] = "StatefulSet";
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        else {
            resourceInputs["apiVersion"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["spec"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "kubernetes:apps/v1beta1:StatefulSet" }, { type: "kubernetes:apps/v1beta2:StatefulSet" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(StatefulSet.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing StatefulSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new StatefulSet(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of StatefulSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StatefulSet.__pulumiType;
    }
}
exports.StatefulSet = StatefulSet;
/** @internal */
StatefulSet.__pulumiType = 'kubernetes:apps/v1:StatefulSet';
//# sourceMappingURL=statefulSet.js.map